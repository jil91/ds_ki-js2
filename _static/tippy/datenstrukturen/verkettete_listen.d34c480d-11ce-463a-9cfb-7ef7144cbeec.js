selector_to_html = {"a[href=\"#verkettete-listen-in-uml\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">15.2.3. </span>Verkettete Listen in UML<a class=\"headerlink\" href=\"#verkettete-listen-in-uml\" title=\"Link to this heading\">#</a></h2><h3><span class=\"section-number\">15.2.3.1. </span>Klassendiagramm<a class=\"headerlink\" href=\"#klassendiagramm\" title=\"Link to this heading\">#</a></h3><p>Das Klassendiagramm  <a class=\"reference internal\" href=\"#fig-kd-verkettete-liste\"><span class=\"std std-numref\">Abb. 15.3</span></a> zeigt, wie man die verkettete Liste in UML modelliert. Du siehst, dass zwei Klassen verwendet werden, <em>VerketteteListe</em> und <em>Knoten</em>. Die Klasse <em>VerketteteListe</em> speichert eine Referenz auf den <em>ersten</em> Knoten (den <strong>Listenkopf</strong>) und enth\u00e4lt all die Methoden aus dem ADT Liste, wie Hinzuf\u00fcgen, Entfernen und Suchen von Elementen.</p>", "a[href=\"#fig-kd-verkettete-liste\"]": "<figure class=\"align-center\" id=\"fig-kd-verkettete-liste\">\n<a class=\"reference internal image-reference\" href=\"../_images/kd_verkettete_liste_fosa.svg\"><img alt=\"../_images/kd_verkettete_liste_fosa.svg\" src=\"../_images/kd_verkettete_liste_fosa.svg\" style=\"width: 80%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 15.3 </span><span class=\"caption-text\">Klassendiagramm f\u00fcr die Datenstruktur <em>Verkettete Liste</em> (FoSa 5.1)</span><a class=\"headerlink\" href=\"#fig-kd-verkettete-liste\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#verkettete-listen\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">15.2. </span>Verkettete Listen<a class=\"headerlink\" href=\"#verkettete-listen\" title=\"Link to this heading\">#</a></h1><p>Es gibt zwei gebr\u00e4uchliche <em>Datenstrukturen</em>, mit denen man den ADT Liste implementieren kann:</p>", "a[href=\"#fig-verkettete-liste-dcba\"]": "<figure class=\"align-center\" id=\"fig-verkettete-liste-dcba\">\n<a class=\"reference internal image-reference\" href=\"../_images/verkettete_Liste_DCBA.svg\"><img alt=\"../_images/verkettete_Liste_DCBA.svg\" src=\"../_images/verkettete_Liste_DCBA.svg\" style=\"width: 70%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 15.2 </span><span class=\"caption-text\">Verkettete Liste oder Polonaise?</span><a class=\"headerlink\" href=\"#fig-verkettete-liste-dcba\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#fig-od-mitarbeiter-verketteteliste\"]": "<figure class=\"align-center\" id=\"fig-od-mitarbeiter-verketteteliste\">\n<a class=\"reference internal image-reference\" href=\"../_images/OD_Mitarbeiter_VerketteteListe.svg\"><img alt=\"../_images/OD_Mitarbeiter_VerketteteListe.svg\" src=\"../_images/OD_Mitarbeiter_VerketteteListe.svg\" style=\"width: 100%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 15.5 </span><span class=\"caption-text\">Objektdiagramm: Liste von Mitarbeitern der geheimnisvollen Abteilung 42</span><a class=\"headerlink\" href=\"#fig-od-mitarbeiter-verketteteliste\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#klassendiagramm\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">15.2.3.1. </span>Klassendiagramm<a class=\"headerlink\" href=\"#klassendiagramm\" title=\"Link to this heading\">#</a></h3><p>Das Klassendiagramm  <a class=\"reference internal\" href=\"#fig-kd-verkettete-liste\"><span class=\"std std-numref\">Abb. 15.3</span></a> zeigt, wie man die verkettete Liste in UML modelliert. Du siehst, dass zwei Klassen verwendet werden, <em>VerketteteListe</em> und <em>Knoten</em>. Die Klasse <em>VerketteteListe</em> speichert eine Referenz auf den <em>ersten</em> Knoten (den <strong>Listenkopf</strong>) und enth\u00e4lt all die Methoden aus dem ADT Liste, wie Hinzuf\u00fcgen, Entfernen und Suchen von Elementen.</p>", "a[href=\"#objektdiagramm\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">15.2.3.2. </span>Objektdiagramm<a class=\"headerlink\" href=\"#objektdiagramm\" title=\"Link to this heading\">#</a></h3><p><strong>Beispiel:</strong> Frau Maier, Herr M\u00fcller und Herr Schmidt arbeiten in der (streng geheimen) Abteilung 42. Alle Mitarbeiter der Abteilung sind in einer (ebenfalls streng geheimen) Liste gespeichert. Es ergibt sich folgendes Objektdiagramm:</p>", "a[href=\"#ubung-einen-neuen-knoten-in-eine-liste-einfugen\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">15.2.2. </span>\u00dcbung: Einen neuen Knoten in eine Liste einf\u00fcgen<a class=\"headerlink\" href=\"#ubung-einen-neuen-knoten-in-eine-liste-einfugen\" title=\"Link to this heading\">#</a></h2><p>Zwischen <code class=\"docutils literal notranslate\"><span class=\"pre\">Coco</span></code> und <code class=\"docutils literal notranslate\"><span class=\"pre\">Bibi</span></code> soll ein weiterer Knoten eingef\u00fcgt werden, z.B. <code class=\"docutils literal notranslate\"><span class=\"pre\">Horst</span></code>. Dazu muss folgendes passieren:</p>", "a[href=\"#verkettete-listen-in-python-programmieren\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">15.3. </span>Verkettete Listen in Python programmieren<a class=\"headerlink\" href=\"#verkettete-listen-in-python-programmieren\" title=\"Link to this heading\">#</a></h1><p>Wir entwickeln zuerst die Klasse <em>Knoten</em> und eine aufs Wesentliche reduzierte Klasse <em>VerketteteListe</em>. In den sp\u00e4teren \u00dcbungen erweitern wir <em>VerketteteListe</em> um immer mehr Methoden.</p><p><strong>Achtung: Der untenstehende Code f\u00fchrt zu einer Endlosschleife, denn er enth\u00e4lt einen (fiesen) Fehler in der Methode <code class=\"docutils literal notranslate\"><span class=\"pre\">einfuegen_vorne</span></code>. Findest du ihn?</strong></p>", "a[href=\"#wie-sehen-verkettete-listen-aus\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">15.2.1. </span>Wie sehen verkettete Listen aus?<a class=\"headerlink\" href=\"#wie-sehen-verkettete-listen-aus\" title=\"Link to this heading\">#</a></h2><p>Eine verkettete Liste besteht aus <strong>Knoten</strong>. Jeder Knoten enth\u00e4lt einen <strong>Inhalt</strong> (z.B. eine Zahl oder\neinen String) und eine <strong>Referenz</strong> auf den <em>n\u00e4chsten</em> Knoten.</p><p>Beispiel:\nListe = [\u201cDina\u201d, \u201cCoco\u201d, \u201cBibi\u201d, \u201cAnna\u201d]</p>", "a[href=\"#fig-kd-mitarbeiter-verketteteliste\"]": "<figure class=\"align-center\" id=\"fig-kd-mitarbeiter-verketteteliste\">\n<a class=\"reference internal image-reference\" href=\"../_images/KD_Mitarbeiter_VerketteteListe.svg\"><img alt=\"../_images/KD_Mitarbeiter_VerketteteListe.svg\" src=\"../_images/KD_Mitarbeiter_VerketteteListe.svg\" style=\"width: 80%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 15.4 </span><span class=\"caption-text\">Klassendiagramm: Verkettete Liste von Mitarbeitern</span><a class=\"headerlink\" href=\"#fig-kd-mitarbeiter-verketteteliste\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(`article.bd-article ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }
            link.classList.add('has-tippy');
            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: false,
                placement: 'auto-start', maxWidth: 500, interactive: true, boundary: document.body, appendTo: document.body,
                onShow(instance) {MathJax.typesetPromise([instance.popper]).then(() => {var isFirefox=typeof InstallTrigger!=='undefined';if(isFirefox&&window.MathJax&&MathJax.startup&&MathJax.startup.output&&MathJax.startup.output.name==="SVG"){const svgs=instance.popper.querySelectorAll('svg');svgs.forEach(svg=>{let bbox=svg.getBBox(),x=bbox.x,y=bbox.y,width=bbox.width,height=bbox.height;svg.setAttribute('width',width);svg.setAttribute('height',height);svg.setAttribute('viewBox',`${x} ${y} ${width} ${height}`);});let rescale=0.015;svgs.forEach(svg=>{let bbox=svg.getBBox(),width=bbox.width,height=bbox.height;svg.setAttribute('width',width*rescale);svg.setAttribute('height',height*rescale);});}});},
            });
        };
    };
    console.log("tippy tips loaded!");
};
