selector_to_html = {"a[href=\"#listen\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">14.1.1. </span>Listen<a class=\"headerlink\" href=\"#listen\" title=\"Link to this heading\">#</a></h3><p>Eine <strong>Liste</strong> ist eine <em>geordnete</em> Sammlung von Elementen, bei der jedes Element an einer bestimmten Position (Index) steht. Sie erm\u00f6glicht das Hinzuf\u00fcgen, Entfernen und Abrufen von Elementen an jeder Position in der Liste. Listen sind flexibel und werden h\u00e4ufig verwendet, wenn die Reihenfolge der Daten wichtig ist oder man schnell auf ein bestimmtes Element zugreifen muss.</p><p><strong>Typische Operationen:</strong></p>", "a[href=\"#assoziative-arrays-auch-dictionary-map\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">14.1.4. </span>Assoziative Arrays (auch: Dictionary/Map)<a class=\"headerlink\" href=\"#assoziative-arrays-auch-dictionary-map\" title=\"Link to this heading\">#</a></h3><p>Ein <strong>assoziatives Array</strong> (auch <strong>Dictionary</strong> oder <strong>Map</strong>) ist ein ADT, das Daten als <strong>Schl\u00fcssel-Wert-Paare</strong> speichert. Anstatt auf Daten durch einen Index (Position) zuzugreifen, erfolgt der Zugriff \u00fcber einen eindeutigen Schl\u00fcssel, der mit einem bestimmten Wert verkn\u00fcpft ist. Diese Struktur ist besonders n\u00fctzlich, wenn du Daten schnell anhand eines eindeutigen Identifikators (z. B. einem Namen oder einer ID) abrufen m\u00f6chtest, wie in einem Telefonbuch oder einer Datenbank.</p><p><strong>Typische Operationen:</strong></p>", "a[href=\"#warteschlangen-queue\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">14.1.3. </span>Warteschlangen (Queue)<a class=\"headerlink\" href=\"#warteschlangen-queue\" title=\"Link to this heading\">#</a></h3><p>Eine <strong>Warteschlange</strong> (engl. <em>Queue</em>) funktioniert nach dem Prinzip <strong>FIFO</strong> (First In, First Out), d. h. das erste hinzugef\u00fcgte Element wird als erstes entfernt. Ein praktisches Beispiel ist eine Warteschlange im Supermarkt: Der Kunde, der zuerst in die Schlange tritt, wird auch als erstes bedient. Warteschlangen werden oft verwendet, um Aufgaben oder Prozesse in der Reihenfolge zu verarbeiten, in der sie eintreffen, zum Beispiel in Druckauftr\u00e4gen oder beim Netzwerkdatenverkehr.</p><p><strong>Typische Operationen:</strong></p>", "a[href=\"#vier-wichtige-abstrakte-datentypen\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">14.1. </span>Vier wichtige abstrakte Datentypen<a class=\"headerlink\" href=\"#vier-wichtige-abstrakte-datentypen\" title=\"Link to this heading\">#</a></h2><p>In der Informatik gibt es viele abstrakte Datentypen (ADT) mit unterschiedlichen Anwendungszwecken. Jeder ADT definiert, <strong>was</strong> wir mit Daten tun k\u00f6nnen, ohne festzulegen, <strong>wie</strong> dies genau implementiert wird. Hier lernst du vier der wichtigsten abstrakten Datentypen kennen: <strong>Listen</strong>, <strong>Stapel</strong>, <strong>Warteschlangen</strong> und <strong>assoziative Arrays</strong>. In den sp\u00e4teren Kapiteln lernst du dann, sie in UMLzu modellieren und die einzelnen Operationen zu implementieren.</p>", "a[href=\"#abstrakte-datentypen-adt-vs-datenstrukturen\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">14. </span>Abstrakte Datentypen (ADT) vs Datenstrukturen<a class=\"headerlink\" href=\"#abstrakte-datentypen-adt-vs-datenstrukturen\" title=\"Link to this heading\">#</a></h1><p>Jedes Computerprogramm speichert und verarbeitet Daten. Um diese Daten effizient zu verwalten, m\u00fcssen sie strukturiert organisiert werden. Hier kommen <strong>Abstrakte Datentypen (ADT)</strong> und <strong>Datenstrukturen</strong> ins Spiel.</p><p>Ein <strong>Abstrakter Datentyp (ADT)</strong> definiert ein <strong>Interface</strong>, also eine Sammlung von Operationen, die auf den Daten ausgef\u00fchrt werden k\u00f6nnen \u2013 zum Beispiel das Hinzuf\u00fcgen, Entfernen oder Abrufen von Elementen. Der ADT beschreibt, <strong>was</strong> diese Operationen leisten, ohne jedoch festzulegen, <strong>wie</strong> sie intern umgesetzt werden. Diese Details \u00fcbernimmt die <strong>Datenstruktur</strong>, die daf\u00fcr sorgt, dass die Daten optimal im Speicher organisiert sind und die Operationen effizient ausgef\u00fchrt werden k\u00f6nnen.</p>", "a[href=\"#stapel-stack\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">14.1.2. </span>Stapel (Stack)<a class=\"headerlink\" href=\"#stapel-stack\" title=\"Link to this heading\">#</a></h3><p>Ein <strong>Stapel</strong> (engl. <em>Stack</em>) ist ein ADT, der nach dem Prinzip <strong>LIFO</strong> (Last In, First Out) funktioniert, was bedeutet, dass das zuletzt hinzugef\u00fcgte Element als erstes entfernt wird. Stell dir einen Stapel B\u00fccher vor \u2013 das zuletzt obenauf gelegte Buch wird zuerst wieder genommen. Stapel werden h\u00e4ufig in Situationen verwendet, in denen es wichtig ist, den Verlauf von Aktionen r\u00fcckg\u00e4ngig zu machen, wie zum Beispiel beim \u201cR\u00fcckg\u00e4ngig\u201d-Machen in Textverarbeitungsprogrammen.</p><p><strong>Typische Operationen:</strong></p>", "a[href=\"#fig-adt\"]": "<figure class=\"align-left\" id=\"fig-adt\">\n<a class=\"reference internal image-reference\" href=\"../_images/adt.png\"><img alt=\"../_images/adt.png\" src=\"../_images/adt.png\" style=\"width: 95%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 14.1 </span><span class=\"caption-text\">Abstrakter Datentyp (ADT) vs. Datenstruktur</span><a class=\"headerlink\" href=\"#fig-adt\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(`article.bd-article ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }
            link.classList.add('has-tippy');
            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: false,
                placement: 'auto-start', maxWidth: 500, interactive: true, boundary: document.body, appendTo: document.body,
                onShow(instance) {MathJax.typesetPromise([instance.popper]).then(() => {var isFirefox=typeof InstallTrigger!=='undefined';if(isFirefox&&window.MathJax&&MathJax.startup&&MathJax.startup.output&&MathJax.startup.output.name==="SVG"){const svgs=instance.popper.querySelectorAll('svg');svgs.forEach(svg=>{let bbox=svg.getBBox(),x=bbox.x,y=bbox.y,width=bbox.width,height=bbox.height;svg.setAttribute('width',width);svg.setAttribute('height',height);svg.setAttribute('viewBox',`${x} ${y} ${width} ${height}`);});let rescale=0.015;svgs.forEach(svg=>{let bbox=svg.getBBox(),width=bbox.width,height=bbox.height;svg.setAttribute('width',width*rescale);svg.setAttribute('height',height*rescale);});}});},
            });
        };
    };
    console.log("tippy tips loaded!");
};
