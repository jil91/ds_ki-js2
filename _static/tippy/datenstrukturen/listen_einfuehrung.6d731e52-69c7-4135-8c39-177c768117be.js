selector_to_html = {"a[href=\"#listen-in-python\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">15.1.1. </span>Listen in Python<a class=\"headerlink\" href=\"#listen-in-python\" title=\"Link to this heading\">#</a></h3><p>Auch bei den Datentypen, die von einer Programmiersprache oder eine Bibliothek bereitgestellt werden, interessiert uns v.a., was wir damit tun k\u00f6nnen, nicht wie sie intern implementiert sind. Wir wissen z.B., dass der Datentyp <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> in Python Methoden wie <code class=\"docutils literal notranslate\"><span class=\"pre\">append</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">insert</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">remove</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">index</span></code> usw. bereitstellt. Damit k\u00f6nnen wir das Pseudocode-Beispiel von oben nachbauen.</p>", "a[href=\"#fig-kd-liste-adt-interface\"]": "<figure class=\"align-center\" id=\"fig-kd-liste-adt-interface\">\n<a class=\"reference internal image-reference\" href=\"../_images/kd_liste_adt_interface_fosa.svg\"><img alt=\"../_images/kd_liste_adt_interface_fosa.svg\" src=\"../_images/kd_liste_adt_interface_fosa.svg\" style=\"width: 30%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 15.1 </span><span class=\"caption-text\">Der abstrakte Datentyp <em>Liste</em> als UML-Klassendiagramm (FoSa 4.3.2)</span><a class=\"headerlink\" href=\"#fig-kd-liste-adt-interface\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#listen\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">15. </span>Listen<a class=\"headerlink\" href=\"#listen\" title=\"Link to this heading\">#</a></h1><h2><span class=\"section-number\">15.1. </span>Der abstrakte Datentyp <em>Liste</em><a class=\"headerlink\" href=\"#der-abstrakte-datentyp-liste\" title=\"Link to this heading\">#</a></h2><p>Listen sind in der Informatik allgegenw\u00e4rtig. Man nutzt sie immer, wenn f\u00fcr die Verarbeitung von Daten wichtig ist, in welcher <em>Reihenfolge</em> sie vorliegen bzw. an welcher genauen <em>Position</em> (<em>Index</em>) ein bestimmter Wert steht.</p><p>Die wichtigsten Operationen von Listen sind in <a class=\"reference internal\" href=\"#fig-kd-liste-adt-interface\"><span class=\"std std-numref\">Abb. 15.1</span></a> aufge<em>list</em>et \ud83d\ude09:</p>", "a[href=\"#der-abstrakte-datentyp-liste\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">15.1. </span>Der abstrakte Datentyp <em>Liste</em><a class=\"headerlink\" href=\"#der-abstrakte-datentyp-liste\" title=\"Link to this heading\">#</a></h2><p>Listen sind in der Informatik allgegenw\u00e4rtig. Man nutzt sie immer, wenn f\u00fcr die Verarbeitung von Daten wichtig ist, in welcher <em>Reihenfolge</em> sie vorliegen bzw. an welcher genauen <em>Position</em> (<em>Index</em>) ein bestimmter Wert steht.</p><p>Die wichtigsten Operationen von Listen sind in <a class=\"reference internal\" href=\"#fig-kd-liste-adt-interface\"><span class=\"std std-numref\">Abb. 15.1</span></a> aufge<em>list</em>et \ud83d\ude09:</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(`article.bd-article ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }
            link.classList.add('has-tippy');
            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: false,
                placement: 'auto-start', maxWidth: 500, interactive: true, boundary: document.body, appendTo: document.body,
                onShow(instance) {MathJax.typesetPromise([instance.popper]).then(() => {var isFirefox=typeof InstallTrigger!=='undefined';if(isFirefox&&window.MathJax&&MathJax.startup&&MathJax.startup.output&&MathJax.startup.output.name==="SVG"){const svgs=instance.popper.querySelectorAll('svg');svgs.forEach(svg=>{let bbox=svg.getBBox(),x=bbox.x,y=bbox.y,width=bbox.width,height=bbox.height;svg.setAttribute('width',width);svg.setAttribute('height',height);svg.setAttribute('viewBox',`${x} ${y} ${width} ${height}`);});let rescale=0.015;svgs.forEach(svg=>{let bbox=svg.getBBox(),width=bbox.width,height=bbox.height;svg.setAttribute('width',width*rescale);svg.setAttribute('height',height*rescale);});}});},
            });
        };
    };
    console.log("tippy tips loaded!");
};
