selector_to_html = {"a[href=\"#assoziative-arrays\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">6. </span>Assoziative Arrays<a class=\"headerlink\" href=\"#assoziative-arrays\" title=\"Link to this heading\">#</a></h1><p><strong>Beispiel 1:</strong> Stell dir vor, du wolltest eine Vokabeltrainer-App entwickeln. Wer damit lernt, muss zu einer deutschen Vokabel die englische \u00dcbersetzung nennen. Das Programm \u00fcberpr\u00fcft dann die Antwort.\nKlar ist: Wir brauchen dazu eine Datenstruktur, die uns erm\u00f6glicht <em>schnell</em> zu \u00fcberpr\u00fcfen, ob die englische Benutzereingabe zur deutschen Vokabel passt.</p><p><strong>Beispiel 2:</strong> In einem altmodischen Telefonbuch wurde jedem Namen eine Telefonnummer zugeordnet. Das nutzt heute (fast) niemand mehr, aber deine Kontaktliste im Smartphone speichert ebenfalls eine solche <strong>Zuordnung</strong>: Wenn du \u201cHeini\u201d eintippst, ist diesem String eine Telefonummer (und meist noch viele andere Informationen \u00fcber deinen Kumpel Heini) zugeordnet. Auch hierf\u00fcr ist es entscheidend, dass der dem <strong>Schl\u00fcssel</strong> \u201cHeini\u201d zugeordnete <strong>Wert</strong> (z.B. 0172-1234567) blitzschnell gefunden werden kann.</p>", "a[href=\"#aufgabe-haufigkeit-von-buchstaben-zahlen\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">6.3.2. </span>Aufgabe: H\u00e4ufigkeit von Buchstaben z\u00e4hlen<a class=\"headerlink\" href=\"#aufgabe-haufigkeit-von-buchstaben-zahlen\" title=\"Link to this heading\">#</a></h3><p>Schreibe ein Programm, das einen String liest und daraus ein Dictionary erstellt, das die H\u00e4ufigkeit jedes Buchstabens im Satz z\u00e4hlt.</p>", "a[href=\"#ubungen-zu-dictionaries\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">6.3. </span>\u00dcbungen zu Dictionaries<a class=\"headerlink\" href=\"#ubungen-zu-dictionaries\" title=\"Link to this heading\">#</a></h2><h3><span class=\"section-number\">6.3.1. </span>Aufgabe: Artikel und Preise<a class=\"headerlink\" href=\"#aufgabe-artikel-und-preise\" title=\"Link to this heading\">#</a></h3><p>Unten siehst du ein Dictionary, das Produkte (als Schl\u00fcssel) und deren Preise (als Werte) enth\u00e4lt.</p><p>a) Schreibe eine Funktion <code class=\"docutils literal notranslate\"><span class=\"pre\">preis_fuer</span></code>, die als Parameter einen Produktnamen \u00fcbergeben bekommt und den Preis des Produkts zur\u00fcckgibt. Falls das Produkt nicht im Dictionary ist, soll eine Fehlermeldung angezeigt werden.</p>", "a[href=\"#aufgabe-mini-vokabeltrainer-reloaded\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">6.3.4. </span>Aufgabe: Mini-Vokabeltrainer reloaded<a class=\"headerlink\" href=\"#aufgabe-mini-vokabeltrainer-reloaded\" title=\"Link to this heading\">#</a></h3><p>Weiter oben hast du (hoffentlich!) den Code des Vokabeltrainers genau studiert. Programmiere ihn jetzt nach - nat\u00fcrlich m\u00f6glichst ohne nochmal nachzuschauen.</p>", "a[href=\"#aufgabe-artikel-und-preise\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">6.3.1. </span>Aufgabe: Artikel und Preise<a class=\"headerlink\" href=\"#aufgabe-artikel-und-preise\" title=\"Link to this heading\">#</a></h3><p>Unten siehst du ein Dictionary, das Produkte (als Schl\u00fcssel) und deren Preise (als Werte) enth\u00e4lt.</p><p>a) Schreibe eine Funktion <code class=\"docutils literal notranslate\"><span class=\"pre\">preis_fuer</span></code>, die als Parameter einen Produktnamen \u00fcbergeben bekommt und den Preis des Produkts zur\u00fcckgibt. Falls das Produkt nicht im Dictionary ist, soll eine Fehlermeldung angezeigt werden.</p>", "a[href=\"#aufgaben-kontodaten\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">6.3.3. </span>Aufgaben: Kontodaten<a class=\"headerlink\" href=\"#aufgaben-kontodaten\" title=\"Link to this heading\">#</a></h3><p>F\u00fcr eine Banking-App hast du die Klasse <code class=\"docutils literal notranslate\"><span class=\"pre\">Konto</span></code> entwickelt (s. unten). Da du damit rechnest, bald Millionen von Kunden zu betreuen, muss deine App blitzschnell von der Kontonummer auf alle Kontendaten zugreifen k\u00f6nnen.</p><p>a) Erg\u00e4nze den untenstehenden Code entsprechend.</p>", "a[href=\"#wie-arbeiten-dictionaries-intern\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">6.4. </span>Wie arbeiten Dictionaries intern?<a class=\"headerlink\" href=\"#wie-arbeiten-dictionaries-intern\" title=\"Link to this heading\">#</a></h2><p>Gute Frage - sch\u00f6n, dass du dich daf\u00fcr interessierst\u2026 Leider haben wir in diesem Schuljahr nicht gen\u00fcgend Zeit, um uns das genauer anzuschauen \ud83d\ude3f</p><p>Aber keine Sorge: Im Abi kommt das Thema auch nicht dran, so dass wir es hier guten Gewissens weglassen k\u00f6nnen!</p>", "a[href=\"#beispiel-mini-vokabeltrainer\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">6.2. </span>Beispiel: Mini-Vokabeltrainer<a class=\"headerlink\" href=\"#beispiel-mini-vokabeltrainer\" title=\"Link to this heading\">#</a></h2><p>F\u00fchre die folgende Zelle mehrfach aus. Jedesmal wird eine zuf\u00e4llige Vokabel abgefragt.</p><p>Schaue dir nun den Code gr\u00fcndlich an, bis du verstehst, wie das Programm arbeitet.</p>", "a[href=\"#assoziative-arrays-in-python-dictionaries\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">6.1. </span>Assoziative Arrays in Python: Dictionaries<a class=\"headerlink\" href=\"#assoziative-arrays-in-python-dictionaries\" title=\"Link to this heading\">#</a></h2><p>In einer Liste wird immer einer <em>Position</em> ein <em>Wert</em> zugeordnet, z.B.:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">namen[17]</span> <span class=\"pre\">=</span> <span class=\"pre\">\"Bibi\"</span></code>, d.h. an der Position 17 wird der Wert \u201cBibi\u201d gespeichert. In einer\nzweiten Liste f\u00fcr Telefonnummern kann man dann z.B.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">telefonnummern[17]</span> <span class=\"pre\">=</span> <span class=\"pre\">\"0711-1234\"</span></code> zuordnene, d.h. an der Position 17 wird der Wert \u201c0711-1234\u201d gespeichert.</p><p>Das ist oft aber nur eine umst\u00e4ndliche Behelfsl\u00f6sung f\u00fcr das, was man eigentlich ben\u00f6tigt. Denn wenn man z.B. die Telefonummer von \u201cHeinz\u201d sucht, muss\nman erst die <em>Position</em> von \u201cHeinz\u201d in der Liste <code class=\"docutils literal notranslate\"><span class=\"pre\">namen</span></code> suchen und dann an der gleichen Position in der Liste\n<code class=\"docutils literal notranslate\"><span class=\"pre\">telefonnummern</span></code> nachsehen. Das ist umst\u00e4ndlich und fehleranf\u00e4llig!</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(`article.bd-article ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }
            link.classList.add('has-tippy');
            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: false,
                placement: 'auto-start', maxWidth: 500, interactive: true, boundary: document.body, appendTo: document.body,
                onShow(instance) {MathJax.typesetPromise([instance.popper]).then(() => {var isFirefox=typeof InstallTrigger!=='undefined';if(isFirefox&&window.MathJax&&MathJax.startup&&MathJax.startup.output&&MathJax.startup.output.name==="SVG"){const svgs=instance.popper.querySelectorAll('svg');svgs.forEach(svg=>{let bbox=svg.getBBox(),x=bbox.x,y=bbox.y,width=bbox.width,height=bbox.height;svg.setAttribute('width',width);svg.setAttribute('height',height);svg.setAttribute('viewBox',`${x} ${y} ${width} ${height}`);});let rescale=0.015;svgs.forEach(svg=>{let bbox=svg.getBBox(),width=bbox.width,height=bbox.height;svg.setAttribute('width',width*rescale);svg.setAttribute('height',height*rescale);});}});},
            });
        };
    };
    console.log("tippy tips loaded!");
};
