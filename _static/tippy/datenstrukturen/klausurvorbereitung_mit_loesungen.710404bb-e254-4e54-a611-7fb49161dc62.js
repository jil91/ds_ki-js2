selector_to_html = {"a[href=\"binaerbaeume.html#fig-binbaum-fosa\"]": "<figure class=\"align-center\" id=\"fig-binbaum-fosa\">\n<a class=\"reference internal image-reference\" href=\"../_images/BinBaum.svg\"><img alt=\"../_images/BinBaum.svg\" src=\"../_images/BinBaum.svg\" style=\"width: 70%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 18.17 </span><span class=\"caption-text\">Klassendiagramm Bin\u00e4rbaum aus der Formelsammlung</span><a class=\"headerlink\" href=\"#fig-binbaum-fosa\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#aufgabe-stapel\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">19.4. </span>Aufgabe Stapel<a class=\"headerlink\" href=\"#aufgabe-stapel\" title=\"Link to this heading\">#</a></h2><p>Was gibt der folgende Code aus?</p>", "a[href=\"#aufgabe-binarbaum-rekursion-programmieren\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">19.8. </span>Aufgabe Bin\u00e4rbaum: Rekursion programmieren<a class=\"headerlink\" href=\"#aufgabe-binarbaum-rekursion-programmieren\" title=\"Link to this heading\">#</a></h2><p>Erg\u00e4nze den untenstehenden Code zu einer rekursiven Funktion <code class=\"docutils literal notranslate\"><span class=\"pre\">summe(knoten:</span> <span class=\"pre\">Knoten|None)</span></code>, die die Summe aller Werte berechnet, die in dem Baum gespeichert sind.<br/>\n(Beispiel: F\u00fcr den Baum aus der vorigen Abbildung m\u00fcsste die Funktion den Wert 432 als Summe aller Knoteninhalte berechnen.)</p>", "a[href=\"#aufgabe-verkettete-listen-operation-implementieren\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">19.3. </span>Aufgabe Verkettete Listen: Operation implementieren<a class=\"headerlink\" href=\"#aufgabe-verkettete-listen-operation-implementieren\" title=\"Link to this heading\">#</a></h2><p>Implementiere die Methode <code class=\"docutils literal notranslate\"><span class=\"pre\">anhaengen</span></code> der Klasse <code class=\"docutils literal notranslate\"><span class=\"pre\">VerketteteListe</span></code> in Pseudocode oder Python, so wie sie im Klassendiagramm in <a class=\"reference internal\" href=\"verkettete_listen.html#fig-kd-verkettete-liste\"><span class=\"std std-numref\">Abb. 15.3</span></a> vorkommt.</p>", "a[href=\"#aufgabe-binarbaum-operation-implementieren\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">19.6. </span>Aufgabe Bin\u00e4rbaum: Operation implementieren<a class=\"headerlink\" href=\"#aufgabe-binarbaum-operation-implementieren\" title=\"Link to this heading\">#</a></h2><p>Der folgende Bin\u00e4rbaum soll aufgebaut werden:</p>", "a[href=\"#aufgabe-verkettete-listen-objektdiagramm-zeichnen\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">19.2. </span>Aufgabe Verkettete Listen: Objektdiagramm zeichnen<a class=\"headerlink\" href=\"#aufgabe-verkettete-listen-objektdiagramm-zeichnen\" title=\"Link to this heading\">#</a></h2><p>F\u00fcr die Produktion des Films \u201cBibi und Tina (Teil 17)\u201d werden - warum auch immer - alle im Drehbuch vorkommenden Figuren in einer verketteten Liste verwaltet.\nDer folgende Pseudocode erzeugt diese Liste mit den Klassen und Methoden aus dem Klassendiagram in <a class=\"reference internal\" href=\"verkettete_listen.html#fig-kd-verkettete-liste\"><span class=\"std std-numref\">Abb. 15.3</span></a>.</p><p>Stelle die so entstandene Datenstruktur als <em>Objektdiagramm</em> dar.</p>", "a[href=\"#aufgabe\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">19.1. </span>Aufgabe<a class=\"headerlink\" href=\"#aufgabe\" title=\"Link to this heading\">#</a></h2><p>Welcher abstrakte Datentyp ist jeweils sinnvoll f\u00fcr die folgenden Anwendungen. Entscheide dich zwischen <em>Liste</em>, <em>Stapel</em>, <em>Warteschlange</em>, <em>assoziatives Array</em> und <em>Baum</em>.</p>", "a[href=\"#aufgabe-binarbaum-preorder-postorder-inorder\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">19.5. </span>Aufgabe Bin\u00e4rbaum: Preorder/Postorder/Inorder<a class=\"headerlink\" href=\"#aufgabe-binarbaum-preorder-postorder-inorder\" title=\"Link to this heading\">#</a></h2><p>Betrachte den folgenden Baum.</p>", "a[href=\"verkettete_listen.html#fig-kd-verkettete-liste\"]": "<figure class=\"align-center\" id=\"fig-kd-verkettete-liste\">\n<a class=\"reference internal image-reference\" href=\"../_images/kd_verkettete_liste_fosa.svg\"><img alt=\"../_images/kd_verkettete_liste_fosa.svg\" src=\"../_images/kd_verkettete_liste_fosa.svg\" style=\"width: 80%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 15.3 </span><span class=\"caption-text\">Klassendiagramm f\u00fcr die Datenstruktur <em>Verkettete Liste</em> (FoSa 4.68)</span><a class=\"headerlink\" href=\"#fig-kd-verkettete-liste\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#aufgabe-binarbaum-rekursion-verstehen\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">19.7. </span>Aufgabe Bin\u00e4rbaum: Rekursion verstehen<a class=\"headerlink\" href=\"#aufgabe-binarbaum-rekursion-verstehen\" title=\"Link to this heading\">#</a></h2><p>Betrachte den folgenden Baum.</p>", "a[href=\"#aufgaben-zur-vorbereitung-auf-klausur-und-abitur\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">19. </span>Aufgaben zur Vorbereitung auf Klausur und Abitur<a class=\"headerlink\" href=\"#aufgaben-zur-vorbereitung-auf-klausur-und-abitur\" title=\"Link to this heading\">#</a></h1><h2><span class=\"section-number\">19.1. </span>Aufgabe<a class=\"headerlink\" href=\"#aufgabe\" title=\"Link to this heading\">#</a></h2><p>Welcher abstrakte Datentyp ist jeweils sinnvoll f\u00fcr die folgenden Anwendungen. Entscheide dich zwischen <em>Liste</em>, <em>Stapel</em>, <em>Warteschlange</em>, <em>assoziatives Array</em> und <em>Baum</em>.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(`article.bd-article ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }
            link.classList.add('has-tippy');
            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: false,
                placement: 'auto-start', maxWidth: 500, interactive: true, boundary: document.body, appendTo: document.body,
                onShow(instance) {MathJax.typesetPromise([instance.popper]).then(() => {var isFirefox=typeof InstallTrigger!=='undefined';if(isFirefox&&window.MathJax&&MathJax.startup&&MathJax.startup.output&&MathJax.startup.output.name==="SVG"){const svgs=instance.popper.querySelectorAll('svg');svgs.forEach(svg=>{let bbox=svg.getBBox(),x=bbox.x,y=bbox.y,width=bbox.width,height=bbox.height;svg.setAttribute('width',width);svg.setAttribute('height',height);svg.setAttribute('viewBox',`${x} ${y} ${width} ${height}`);});let rescale=0.015;svgs.forEach(svg=>{let bbox=svg.getBBox(),width=bbox.width,height=bbox.height;svg.setAttribute('width',width*rescale);svg.setAttribute('height',height*rescale);});}});},
            });
        };
    };
    console.log("tippy tips loaded!");
};
