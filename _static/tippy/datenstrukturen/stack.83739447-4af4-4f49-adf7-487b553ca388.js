selector_to_html = {"a[href=\"#ubungen-stacks-sinnvoll-einsetzen\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">16.1.2. </span>\u00dcbungen: Stacks sinnvoll einsetzen<a class=\"headerlink\" href=\"#ubungen-stacks-sinnvoll-einsetzen\" title=\"Link to this heading\">#</a></h2><h3><span class=\"section-number\">16.1.2.1. </span>Aufgabe 1: Grundlegende Stack-Operationen<a class=\"headerlink\" href=\"#aufgabe-1-grundlegende-stack-operationen\" title=\"Link to this heading\">#</a></h3><p>Gegeben sei ein leerer Stack <code class=\"docutils literal notranslate\"><span class=\"pre\">st</span></code>. F\u00fchre die folgenden Operationen durch und gib den Zustand des Stacks nach jeder Operation an.</p>", "a[href=\"#aufgabe-4-ist-der-term-korrekt-geklammert\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">16.1.2.4. </span>Aufgabe 4: Ist der Term korrekt geklammert?<a class=\"headerlink\" href=\"#aufgabe-4-ist-der-term-korrekt-geklammert\" title=\"Link to this heading\">#</a></h3><p>Gegeben sei der Ausdruck <code class=\"docutils literal notranslate\"><span class=\"pre\">5</span> <span class=\"pre\">+</span> <span class=\"pre\">(3</span> <span class=\"pre\">*</span> <span class=\"pre\">(2</span> <span class=\"pre\">+</span> <span class=\"pre\">1)))</span> <span class=\"pre\">-</span> <span class=\"pre\">(4</span> <span class=\"pre\">/</span> <span class=\"pre\">(6</span> <span class=\"pre\">+</span> <span class=\"pre\">2)</span> <span class=\"pre\">+</span> <span class=\"pre\">7</span></code>. Bestimme, ob die Klammern korrekt ge\u00f6ffnet und geschlossen wurden. Beschreibe, wie ein Stack <code class=\"docutils literal notranslate\"><span class=\"pre\">st</span></code> verwendet werden kann, um dies zu \u00fcberpr\u00fcfen.</p>", "a[href=\"#diskussion-moglichkeiten-einen-stack-zu-implementieren\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">16.1.4.1. </span>Diskussion: M\u00f6glichkeiten einen Stack zu implementieren<a class=\"headerlink\" href=\"#diskussion-moglichkeiten-einen-stack-zu-implementieren\" title=\"Link to this heading\">#</a></h3><p>Im vorigen Absatz hast du gesehen, dass Stapel verketteten Listen recht \u00e4hnlich sind. F\u00fcr die Implementierung haben wir darum nun auch mehrere M\u00f6glichkeiten:</p>", "a[href=\"#variante-3-stapel-nutzt-intern-eine-verkettete-liste-komposition\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">16.1.4.4. </span>Variante 3: Stapel nutzt intern eine verkettete Liste (Komposition)<a class=\"headerlink\" href=\"#variante-3-stapel-nutzt-intern-eine-verkettete-liste-komposition\" title=\"Link to this heading\">#</a></h3>", "a[href=\"#aufgabe-1-grundlegende-stack-operationen\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">16.1.2.1. </span>Aufgabe 1: Grundlegende Stack-Operationen<a class=\"headerlink\" href=\"#aufgabe-1-grundlegende-stack-operationen\" title=\"Link to this heading\">#</a></h3><p>Gegeben sei ein leerer Stack <code class=\"docutils literal notranslate\"><span class=\"pre\">st</span></code>. F\u00fchre die folgenden Operationen durch und gib den Zustand des Stacks nach jeder Operation an.</p>", "a[href=\"verkettete_listen.html#sec-verkettete-listen-uml\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">15.2.3. </span>Verkettete Listen in UML<a class=\"headerlink\" href=\"#verkettete-listen-in-uml\" title=\"Link to this heading\">#</a></h2><h3><span class=\"section-number\">15.2.3.1. </span>Klassendiagramm<a class=\"headerlink\" href=\"#klassendiagramm\" title=\"Link to this heading\">#</a></h3><p>Das Klassendiagramm  <a class=\"reference internal\" href=\"#fig-kd-verkettete-liste\"><span class=\"std std-numref\">Abb. 15.3</span></a> zeigt, wie man die verkettete Liste in UML modelliert. Du siehst, dass zwei Klassen verwendet werden, <em>VerketteteListe</em> und <em>Knoten</em>. Die Klasse <em>VerketteteListe</em> speichert eine Referenz auf den <em>ersten</em> Knoten (den <strong>Listenkopf</strong>) und enth\u00e4lt all die Methoden aus dem ADT Liste, wie Hinzuf\u00fcgen, Entfernen und Suchen von Elementen.</p>", "a[href=\"#variante-1-stapel-neu-implementieren\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">16.1.4.2. </span>Variante 1: Stapel neu implementieren<a class=\"headerlink\" href=\"#variante-1-stapel-neu-implementieren\" title=\"Link to this heading\">#</a></h3>", "a[href=\"#aufgabe-3-bucher-stapeln\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">16.1.2.3. </span>Aufgabe 3: B\u00fccher stapeln<a class=\"headerlink\" href=\"#aufgabe-3-bucher-stapeln\" title=\"Link to this heading\">#</a></h3><p>Angenommen, du hast einen Stapel B\u00fccher. Jedes Buch kann auf ein anderes gelegt oder von oben abgenommen werden. Wie kannst du vorgehen, um einen bestimmten Buchtitel aus der Mitte des Stapels zu entfernen? Beschreibe die Vorgehensweise und welche Einschr\u00e4nkungen es dabei gibt.</p>", "a[href=\"#variante-2-vererbung-schlechte-idee\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">16.1.4.3. </span>Variante 2: Vererbung (schlechte Idee!)<a class=\"headerlink\" href=\"#variante-2-vererbung-schlechte-idee\" title=\"Link to this heading\">#</a></h3>", "a[href=\"#aufgabe-2-zeichenkette-umdrehen\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">16.1.2.2. </span>Aufgabe 2: Zeichenkette umdrehen<a class=\"headerlink\" href=\"#aufgabe-2-zeichenkette-umdrehen\" title=\"Link to this heading\">#</a></h3><p>Du hast die Zeichenkette bzw. den String \u201cKITAMROFNI\u201d. Beschreibe, wie du mit einem Stack <code class=\"docutils literal notranslate\"><span class=\"pre\">st</span></code> die Zeichenkette in ihre korrekte Form umkehren kannst. Schreibe die Schritte auf, die du ausf\u00fchren w\u00fcrdest.</p>", "a[href=\"#motivation-undo-funktion\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">16.1.1. </span>Motivation: Undo-Funktion<a class=\"headerlink\" href=\"#motivation-undo-funktion\" title=\"Link to this heading\">#</a></h2><p>Du willst eine App programmieren, die eine <strong>\u201cR\u00fcckg\u00e4ngig\u201d-Funktion</strong> bietet, wie du sie von Textverarbeitungsprogrammen oder Zeichen-Apps kennst. Diese Funktion soll alle letzten Aktionen in umgekehrter Reihenfolge r\u00fcckg\u00e4ngig machen k\u00f6nnen.</p><p>Ein <strong>Stack</strong> (Stapel) ist eine perfekte Datenstruktur f\u00fcr diese Aufgabe, da er nach dem Prinzip <strong>\u201cLast In, First Out\u201d (LIFO)</strong> funktioniert \u2013 die letzte Aktion, die du gemacht hast, ist die erste, die r\u00fcckg\u00e4ngig gemacht wird.</p>", "a[href=\"#sec-stack-implementierungsvarianten\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">16.1.4.1. </span>Diskussion: M\u00f6glichkeiten einen Stack zu implementieren<a class=\"headerlink\" href=\"#diskussion-moglichkeiten-einen-stack-zu-implementieren\" title=\"Link to this heading\">#</a></h3><p>Im vorigen Absatz hast du gesehen, dass Stapel verketteten Listen recht \u00e4hnlich sind. F\u00fcr die Implementierung haben wir darum nun auch mehrere M\u00f6glichkeiten:</p>", "a[href=\"#stapel-als-uml-klassendiagramm-modellieren\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">16.1.3. </span>Stapel als UML-Klassendiagramm modellieren<a class=\"headerlink\" href=\"#stapel-als-uml-klassendiagramm-modellieren\" title=\"Link to this heading\">#</a></h2><p>Das Klassendiagramm  <a class=\"reference internal\" href=\"#fig-kd-stack-fosa\"><span class=\"std std-numref\">Abb. 16.1</span></a> zeigt die Modellierung des Datentyps <code class=\"docutils literal notranslate\"><span class=\"pre\">Stapel</span></code> aus der Formelsammlung. Wie beim <a class=\"reference internal\" href=\"verkettete_listen.html#sec-verkettete-listen-uml\"><span class=\"std std-ref\">UML-Diagram der verketteten Liste</span></a> nutzt man die Hilfsklasse <code class=\"docutils literal notranslate\"><span class=\"pre\">Knoten</span></code> um die Elemente auf dem Stack in der richtige <em>Reihenfolge</em> zu speichern.</p>", "a[href=\"#stapel-stack\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">16.1. </span>Stapel (Stack)<a class=\"headerlink\" href=\"#stapel-stack\" title=\"Link to this heading\">#</a></h1><h2><span class=\"section-number\">16.1.1. </span>Motivation: Undo-Funktion<a class=\"headerlink\" href=\"#motivation-undo-funktion\" title=\"Link to this heading\">#</a></h2><p>Du willst eine App programmieren, die eine <strong>\u201cR\u00fcckg\u00e4ngig\u201d-Funktion</strong> bietet, wie du sie von Textverarbeitungsprogrammen oder Zeichen-Apps kennst. Diese Funktion soll alle letzten Aktionen in umgekehrter Reihenfolge r\u00fcckg\u00e4ngig machen k\u00f6nnen.</p><p>Ein <strong>Stack</strong> (Stapel) ist eine perfekte Datenstruktur f\u00fcr diese Aufgabe, da er nach dem Prinzip <strong>\u201cLast In, First Out\u201d (LIFO)</strong> funktioniert \u2013 die letzte Aktion, die du gemacht hast, ist die erste, die r\u00fcckg\u00e4ngig gemacht wird.</p>", "a[href=\"#stapel-implementieren\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">16.1.4. </span>Stapel implementieren<a class=\"headerlink\" href=\"#stapel-implementieren\" title=\"Link to this heading\">#</a></h2><h3><span class=\"section-number\">16.1.4.1. </span>Diskussion: M\u00f6glichkeiten einen Stack zu implementieren<a class=\"headerlink\" href=\"#diskussion-moglichkeiten-einen-stack-zu-implementieren\" title=\"Link to this heading\">#</a></h3><p>Im vorigen Absatz hast du gesehen, dass Stapel verketteten Listen recht \u00e4hnlich sind. F\u00fcr die Implementierung haben wir darum nun auch mehrere M\u00f6glichkeiten:</p>", "a[href=\"#korrekte-klammerung-in-python-parsons-problem\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">16.1.2.5. </span>Korrekte Klammerung in Python (Parsons Problem)<a class=\"headerlink\" href=\"#korrekte-klammerung-in-python-parsons-problem\" title=\"Link to this heading\">#</a></h3><p>Betrachte noch einmal die vorige Aufgabe. Wie k\u00f6nnte man in einem Programm pr\u00fcfen, ob ein mathematischer Ausdruck <code class=\"docutils literal notranslate\"><span class=\"pre\">term</span></code> korrekt geklammert ist?</p><p>Bringe im folgenden Parsons-Problem den Code f\u00fcr die Methode <code class=\"docutils literal notranslate\"><span class=\"pre\">def</span> <span class=\"pre\">ist_korrekt_geklammert(term:</span> <span class=\"pre\">str)</span></code> in die richtige Reihenfolge:</p>", "a[href=\"#fig-kd-stack-fosa\"]": "<figure class=\"align-center\" id=\"fig-kd-stack-fosa\">\n<a class=\"reference internal image-reference\" href=\"../_images/kd_stack_fosa.svg\"><img alt=\"../_images/kd_stack_fosa.svg\" src=\"../_images/kd_stack_fosa.svg\" style=\"width: 80%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 16.1 </span><span class=\"caption-text\">Klassendiagramm f\u00fcr den Datentyp <em>Stapel/Stack</em> (FoSa 5.2)</span><a class=\"headerlink\" href=\"#fig-kd-stack-fosa\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(`article.bd-article ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }
            link.classList.add('has-tippy');
            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: false,
                placement: 'auto-start', maxWidth: 500, interactive: true, boundary: document.body, appendTo: document.body,
                onShow(instance) {MathJax.typesetPromise([instance.popper]).then(() => {var isFirefox=typeof InstallTrigger!=='undefined';if(isFirefox&&window.MathJax&&MathJax.startup&&MathJax.startup.output&&MathJax.startup.output.name==="SVG"){const svgs=instance.popper.querySelectorAll('svg');svgs.forEach(svg=>{let bbox=svg.getBBox(),x=bbox.x,y=bbox.y,width=bbox.width,height=bbox.height;svg.setAttribute('width',width);svg.setAttribute('height',height);svg.setAttribute('viewBox',`${x} ${y} ${width} ${height}`);});let rescale=0.015;svgs.forEach(svg=>{let bbox=svg.getBBox(),width=bbox.width,height=bbox.height;svg.setAttribute('width',width*rescale);svg.setAttribute('height',height*rescale);});}});},
            });
        };
    };
    console.log("tippy tips loaded!");
};
