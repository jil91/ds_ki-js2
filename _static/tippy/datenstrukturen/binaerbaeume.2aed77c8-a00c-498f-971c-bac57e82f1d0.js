selector_to_html = {"a[href=\"https://en.wikipedia.org/wiki/Recursion_(computer_science)\"]": "<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/RecursiveTree.JPG/330px-RecursiveTree.JPG\" alt=\"Wikipedia thumbnail\" style=\"float:left; margin-right:10px;\"><p>In computer science, <b>recursion</b> is a method of solving a computational problem where the solution depends on solutions to smaller instances of the same problem. Recursion solves such recursive problems by using functions that call themselves from within their own code. The approach can be applied to many types of problems, and recursion is one of the central ideas of computer science.</p><blockquote class=\"templatequote \"><p>The power of recursion evidently lies in the possibility of defining an infinite set of objects by a finite statement. In the same manner, an infinite number of computations can be described by a finite recursive program, even if this program contains no explicit repetitions.</p></blockquote>", "a[href^=\"https://en.wikipedia.org/wiki/Recursion_(computer_science)#\"]": "<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/RecursiveTree.JPG/330px-RecursiveTree.JPG\" alt=\"Wikipedia thumbnail\" style=\"float:left; margin-right:10px;\"><p>In computer science, <b>recursion</b> is a method of solving a computational problem where the solution depends on solutions to smaller instances of the same problem. Recursion solves such recursive problems by using functions that call themselves from within their own code. The approach can be applied to many types of problems, and recursion is one of the central ideas of computer science.</p><blockquote class=\"templatequote \"><p>The power of recursion evidently lies in the possibility of defining an infinite set of objects by a finite statement. In the same manner, an infinite number of computations can be described by a finite recursive program, even if this program contains no explicit repetitions.</p></blockquote>", "a[href=\"https://en.wikipedia.org/wiki/Slot_machine\"]": "<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/Las_Vegas_slot_machines.jpg/330px-Las_Vegas_slot_machines.jpg\" alt=\"Wikipedia thumbnail\" style=\"float:left; margin-right:10px;\"><p>A <b>slot machine</b>, <b>fruit machine</b>, <b>puggie</b> (Scots), <b>poker machine</b> or <b>pokie</b> is a gambling machine that creates a game of chance for its customers.</p>", "a[href^=\"https://en.wikipedia.org/wiki/Slot_machine#\"]": "<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/Las_Vegas_slot_machines.jpg/330px-Las_Vegas_slot_machines.jpg\" alt=\"Wikipedia thumbnail\" style=\"float:left; margin-right:10px;\"><p>A <b>slot machine</b>, <b>fruit machine</b>, <b>puggie</b> (Scots), <b>poker machine</b> or <b>pokie</b> is a gambling machine that creates a game of chance for its customers.</p>", "a[href=\"#die-klasse-binaerbaum\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4.8. </span>Die Klasse <em>Binaerbaum</em><a class=\"headerlink\" href=\"#die-klasse-binaerbaum\" title=\"Link to this heading\">#</a></h2><p>Das folgende Klassendiagramm stammt aus der Formelsammlung. Du siehst</p>", "a[href=\"#fig-saeugetiere-7tiere-v2\"]": "<figure class=\"align-center\" id=\"fig-saeugetiere-7tiere-v2\">\n<a class=\"reference internal image-reference\" href=\"../_images/s\u00e4ugetiere_7tiere.svg\"><img alt=\"../_images/s%C3%A4ugetiere_7tiere.svg\" src=\"../_images/s%C3%A4ugetiere_7tiere.svg\" style=\"width: 70%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 18.16 </span><span class=\"caption-text\">Dieser Baum enth\u00e4lt zahlreiche Knoten (\u00e4h, wie viele waren es nochmal genau?)</span><a class=\"headerlink\" href=\"#fig-saeugetiere-7tiere-v2\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#knoten\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4.3.1. </span>Knoten<a class=\"headerlink\" href=\"#knoten\" title=\"Link to this heading\">#</a></h3><p>Der <strong>Knoten</strong> ist der zentrale Baustein f\u00fcr B\u00e4ume (und \u00e4hnliche Strukturen, insb. <a class=\"reference external\" href=\"https://de.wikipedia.org/wiki/Graph_(Graphentheorie)\"><em>Graphen</em></a>).  Ein Knoten speichert</p>", "a[href=\"#easteregg\"]": "<aside class=\"footnote brackets\" id=\"easteregg\" role=\"doc-footnote\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a href=\"#id2\" role=\"doc-backlink\">1</a><span class=\"fn-bracket\">]</span></span>\n<p>Aber hast du auch das <em>easter egg</em> gefunden?</p>\n</aside>", "a[href=\"#aufgabe-1\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4.7.1. </span>Aufgabe 1<a class=\"headerlink\" href=\"#aufgabe-1\" title=\"Link to this heading\">#</a></h3><p>Vergleiche die beiden folgenden Funktionen - beide bestimmen die L\u00e4nge einer verketteten Liste.</p>", "a[href=\"#einfuhrung\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4.1. </span>Einf\u00fchrung<a class=\"headerlink\" href=\"#einfuhrung\" title=\"Link to this heading\">#</a></h2><p>Im vorigen Kapitel haben wir allgemeine B\u00e4ume mit beliebig vielen Kindern betrachtet. In diesem Kapitel schauen wir uns den Spezialfall <strong>Bin\u00e4rbaum</strong> genauer an. Zur Erinnerung:</p>", "a[href=\"#fig-baum7buchstaben\"]": "<figure class=\"align-center\" id=\"fig-baum7buchstaben\">\n<a class=\"reference internal image-reference\" href=\"../_images/baum7buchstaben.svg\"><img alt=\"../_images/baum7buchstaben.svg\" src=\"../_images/baum7buchstaben.svg\" style=\"width: 50%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 18.14 </span><span class=\"caption-text\">Ein Baum mit sieben Knoten.</span><a class=\"headerlink\" href=\"#fig-baum7buchstaben\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#aufgabe-4\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4.7.4. </span>Aufgabe 4<a class=\"headerlink\" href=\"#aufgabe-4\" title=\"Link to this heading\">#</a></h3><p>Bestimme die <em>Tiefe</em> eines Bin\u00e4rbaums.</p><p>Zur Erinnerung: Die Tiefe eines Baums entspricht der Anzahl der Knoten im l\u00e4ngsten Pfad des Baums. Allerdings ist f\u00fcr diese Aufgabe vielleicht eine andere Beschreibung hilfreicher. Du findest sie hinter dem folgenden Tipp. Vielleicht brauchst du den Tipp ja aber gar nicht - die L\u00f6sung ist (mal wieder) <em>seeeehr</em> \u00e4hnlich wie die aus Aufgabe 2 \ud83d\ude09.</p>", "a[href=\"#aufgabe-2\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4.7.2. </span>Aufgabe 2<a class=\"headerlink\" href=\"#aufgabe-2\" title=\"Link to this heading\">#</a></h3><p>Weiter oben hatten wir diesen Baum in Python mithilfe der Klasse <code class=\"docutils literal notranslate\"><span class=\"pre\">Knoten</span></code> definiert:</p>", "a[href=\"#fig-baum3einarmiger-bandit\"]": "<figure class=\"align-center\" id=\"fig-baum3einarmiger-bandit\">\n<a class=\"reference internal image-reference\" href=\"../_images/baum3einarmiger_bandit.svg\"><img alt=\"../_images/baum3einarmiger_bandit.svg\" src=\"../_images/baum3einarmiger_bandit.svg\" style=\"width: 25%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 18.13 </span><span class=\"caption-text\">Ein Baum mit drei Knoten. In welcher Reihenfolge w\u00fcrdest du sie ausgeben?</span><a class=\"headerlink\" href=\"#fig-baum3einarmiger-bandit\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#mit-baumen-sachen-machen\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4.4. </span>Mit B\u00e4umen Sachen machen<a class=\"headerlink\" href=\"#mit-baumen-sachen-machen\" title=\"Link to this heading\">#</a></h2><p>Nat\u00fcrlich wollen wir B\u00e4ume nicht nur erstellen, sondern mit ihnen arbeiten. Zum Beispiel wollen wir</p>", "a[href=\"baeume.html#fig-baum-term\"]": "<figure class=\"align-center\" id=\"fig-baum-term\">\n<a class=\"reference internal image-reference\" href=\"../_images/term.svg\"><img alt=\"../_images/term.svg\" src=\"../_images/term.svg\" style=\"width: 25%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 18.4 </span><span class=\"caption-text\">Dieser Baum stellt einen Rechenausdruck (Term) dar. Welche Zahl ergibt sich, wenn man ihn berechnet?</span><a class=\"headerlink\" href=\"#fig-baum-term\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#umsetzung-in-pseudo-code-rekursion\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4.6. </span>Umsetzung in (Pseudo-)Code. Rekursion<a class=\"headerlink\" href=\"#umsetzung-in-pseudo-code-rekursion\" title=\"Link to this heading\">#</a></h2><p>Diesen Baum haben vorhin bereits in Preorder-, Postorder- und in Inorder-Reihenfolge ausgegeben, allerdings nur <em>von Hand</em>. Wie k\u00f6nnen wir das programmieren?</p><p>F\u00fcr (z.B.) <strong>Preorder</strong> kann man den Algorithmus intuitiv so beschreiben:</p>", "a[href=\"#aufgabe-3\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4.7.3. </span>Aufgabe 3<a class=\"headerlink\" href=\"#aufgabe-3\" title=\"Link to this heading\">#</a></h3><p>Dies ist eine Variante der vorigen Aufgabe: Statt aller Knoten sollst du jetzt nur die <em>Blattknoten</em> z\u00e4hlen, also diejenigen Knoten, deren linker <em>und</em> rechter Teilbaum nicht existieren.</p>", "a[href=\"#binarbaume\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4. </span>Bin\u00e4rb\u00e4ume<a class=\"headerlink\" href=\"#binarbaume\" title=\"Link to this heading\">#</a></h1><h2><span class=\"section-number\">18.4.1. </span>Einf\u00fchrung<a class=\"headerlink\" href=\"#einfuhrung\" title=\"Link to this heading\">#</a></h2><p>Im vorigen Kapitel haben wir allgemeine B\u00e4ume mit beliebig vielen Kindern betrachtet. In diesem Kapitel schauen wir uns den Spezialfall <strong>Bin\u00e4rbaum</strong> genauer an. Zur Erinnerung:</p>", "a[href=\"#id3\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4.7. </span>Aufgaben<a class=\"headerlink\" href=\"#id3\" title=\"Link to this heading\">#</a></h2><p>Oft sind rekursive Probleml\u00f6sungen kurz und elegant (zumindest, wenn man das Prinzip erstmal kapiert hat \ud83d\ude09). <strong>Bei B\u00e4umen ist es sogar so, dass L\u00f6sungen ohne Rekursion meistens extrem kompliziert werden!</strong></p><p>Zur Wahrheit geh\u00f6rt aber auch, dass es viele Problemstellungen gibt, bei denen statt Rekursion auch eine simple <em>Schleife</em> verwendet werden kann. Man spricht dann von einem <strong>iterativen</strong> Ansatz.</p>", "a[href=\"#grund\"]": "<aside class=\"footnote brackets\" id=\"grund\" role=\"doc-footnote\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a href=\"#id4\" role=\"doc-backlink\">2</a><span class=\"fn-bracket\">]</span></span>\n<p>Der Grund f\u00fcr die Verwendung einer allgemeinen Funktion statt einer Methode der Klasse <code class=\"docutils literal notranslate\"><span class=\"pre\">Knoten</span></code> ist, dass es damit leichter wird, den <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>-fall zu \u00fcberpr\u00fcfen. Der Parameter <code class=\"docutils literal notranslate\"><span class=\"pre\">knoten</span></code> kann jetzt auch <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> sein, so dass man den <em>base case</em> mit einer Abfrage \u00e0 la  <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span> <span class=\"pre\">knoten</span> <span class=\"pre\">==</span> <span class=\"pre\">None:</span> <span class=\"pre\">...</span></code>  \u00fcberpr\u00fcfen kann.</p>\n</aside>", "a[href=\"#fig-saeugetiere-7tiere\"]": "<figure class=\"align-center\" id=\"fig-saeugetiere-7tiere\">\n<a class=\"reference internal image-reference\" href=\"../_images/s\u00e4ugetiere_7tiere.svg\"><img alt=\"../_images/s%C3%A4ugetiere_7tiere.svg\" src=\"../_images/s%C3%A4ugetiere_7tiere.svg\" style=\"width: 70%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 18.12 </span><span class=\"caption-text\">Dieser Baum enth\u00e4lt zahlreiche Knoten (naja, sieben)</span><a class=\"headerlink\" href=\"#fig-saeugetiere-7tiere\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#id1\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4.5. </span>Aufgaben<a class=\"headerlink\" href=\"#id1\" title=\"Link to this heading\">#</a></h2><h3><span class=\"section-number\">18.4.5.1. </span>Aufgaben zur Preorder-, Inorder- und Postorder-Traversierung<a class=\"headerlink\" href=\"#aufgaben-zur-preorder-inorder-und-postorder-traversierung\" title=\"Link to this heading\">#</a></h3><p>Aufgabe: Gib f\u00fcr die folgenden B\u00e4ume jeweils alle Elemente in</p>", "a[href=\"#alle-inhalte-eines-baums-ausgeben\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4.4.1. </span>Alle Inhalte eines Baums ausgeben<a class=\"headerlink\" href=\"#alle-inhalte-eines-baums-ausgeben\" title=\"Link to this heading\">#</a></h3><p>Bei einer verketteten Liste ist die <em>Reihenfolge</em> der Elemente klar. Man gibt alle gespeicherten Werte aus, indem man beim ersten Knoten (dem Listenkopf) startet und sich dann von Nachfolger zu Nachfolger bewegt. Dabei gibt man jeweils den Wert im aktuellen Knoten aus.</p><p>Aber wie ist das bei B\u00e4umen? Gibt es auch da eine \u201cnat\u00fcrliche\u201d Reihenfolge? Nein! Um das zu verstehen, betrachten wir das folgende Beispiel.</p>", "a[href=\"baeume.html#fig-baum-begriffe\"]": "<figure class=\"align-center\" id=\"fig-baum-begriffe\">\n<a class=\"reference internal image-reference\" href=\"../_images/Baum.svg\"><img alt=\"../_images/Baum.svg\" src=\"../_images/Baum.svg\" style=\"width: 90%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 18.6 </span><span class=\"caption-text\">Wichtige Begriffe zur Beschreibung von Baumstrukturen</span><a class=\"headerlink\" href=\"#fig-baum-begriffe\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#umsetzung-in-python\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4.3. </span>Umsetzung in Python<a class=\"headerlink\" href=\"#umsetzung-in-python\" title=\"Link to this heading\">#</a></h2><p>Aber wie programmiert man einen Bin\u00e4rbaum? Die Abbildungen in den vorigen Abschnitten sehen ja schon ziemlich furchteinfl\u00f6\u00dfend aus, nicht wahr?</p><p>Keine Sorge, so schlimm ist es nicht, denn tats\u00e4chlich besteht jeder noch so riesige Baum aus den immergleichen \u201cBausteinen\u201d, den <em>Knoten</em>. Und die kennen wir ja eigentlich schon von den verketteten Listen.</p>", "a[href=\"#fig-saeugetiere15\"]": "<figure class=\"align-center\" id=\"fig-saeugetiere15\">\n<a class=\"reference internal image-reference\" href=\"../_images/s\u00e4ugetiere_15knoten.svg\"><img alt=\"../_images/s%C3%A4ugetiere_15knoten.svg\" src=\"../_images/s%C3%A4ugetiere_15knoten.svg\" style=\"width: 95%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 18.9 </span><span class=\"caption-text\">Bin\u00e4rbaum mit verschiedenen S\u00e4ugetier-Kategorien</span><a class=\"headerlink\" href=\"#fig-saeugetiere15\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#fig-binbaum-fosa\"]": "<figure class=\"align-center\" id=\"fig-binbaum-fosa\">\n<a class=\"reference internal image-reference\" href=\"../_images/BinBaum.svg\"><img alt=\"../_images/BinBaum.svg\" src=\"../_images/BinBaum.svg\" style=\"width: 70%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 18.17 </span><span class=\"caption-text\">Klassendiagramm Bin\u00e4rbaum aus der Formelsammlung</span><a class=\"headerlink\" href=\"#fig-binbaum-fosa\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#fig-teilbaume\"]": "<figure class=\"align-center\" id=\"fig-teilbaume\">\n<a class=\"reference internal image-reference\" href=\"../_images/teilb\u00e4ume.png\"><img alt=\"../_images/teilb%C3%A4ume.png\" src=\"../_images/teilb%C3%A4ume.png\" style=\"width: 50%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 18.15 </span><span class=\"caption-text\">Der Gesamtbaum hat 7 Knoten. Er besteht aus einer Wurzel und zwei Teilb\u00e4umen mit je 3 Knoten.</span><a class=\"headerlink\" href=\"#fig-teilbaume\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#fig-knoten9\"]": "<figure class=\"align-center\" id=\"fig-knoten9\">\n<a class=\"reference internal image-reference\" href=\"../_images/knoten9.svg\"><img alt=\"../_images/knoten9.svg\" src=\"../_images/knoten9.svg\" style=\"width: 25%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 18.11 </span><span class=\"caption-text\">Knoten mit zwei ausgehenden Kanten</span><a class=\"headerlink\" href=\"#fig-knoten9\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#aufgaben\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4.2. </span>Aufgaben<a class=\"headerlink\" href=\"#aufgaben\" title=\"Link to this heading\">#</a></h2><p>Betrachte den Baum in <a class=\"reference internal\" href=\"#fig-aufgabe-binbaum-zahlen\"><span class=\"std std-numref\">Abb. 18.10</span></a> und beantworte dann die folgenden Fragen:</p>", "a[href=\"#aufgaben-zur-preorder-inorder-und-postorder-traversierung\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4.5.1. </span>Aufgaben zur Preorder-, Inorder- und Postorder-Traversierung<a class=\"headerlink\" href=\"#aufgaben-zur-preorder-inorder-und-postorder-traversierung\" title=\"Link to this heading\">#</a></h3><p>Aufgabe: Gib f\u00fcr die folgenden B\u00e4ume jeweils alle Elemente in</p>", "a[href=\"#fig-aufgabe-binbaum-zahlen\"]": "<figure class=\"align-center\" id=\"fig-aufgabe-binbaum-zahlen\">\n<a class=\"reference internal image-reference\" href=\"../_images/aufgabe_binbaum_zahlen.svg\"><img alt=\"../_images/aufgabe_binbaum_zahlen.svg\" src=\"../_images/aufgabe_binbaum_zahlen.svg\" style=\"width: 70%;\"/>\n</a>\n<figcaption>\n<p><span class=\"caption-number\">Abb. 18.10 </span><span class=\"caption-text\">Ein Bin\u00e4rbaum voller Zahlen</span><a class=\"headerlink\" href=\"#fig-aufgabe-binbaum-zahlen\" title=\"Link to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#aufgabe-5\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">18.4.7.5. </span>Aufgabe 5<a class=\"headerlink\" href=\"#aufgabe-5\" title=\"Link to this heading\">#</a></h3><p>Schreibe eine Funktion <code class=\"docutils literal notranslate\"><span class=\"pre\">enth\u00e4lt_element(knoten,</span> <span class=\"pre\">gesuchter_wert)</span></code>, die den gesuchten Wert im Baum (ausgehend von <code class=\"docutils literal notranslate\"><span class=\"pre\">knoten</span></code>) sucht und <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> zur\u00fcckgibt, wenn es einen Knoten gibt, dessen Inhalt der gesuchte Wert ist, und sonst <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p><p>Diese Aufgabe ist etwas schwieriger als die vorigen. Das liegt daran, dass es eine gewisse \u201cUngleichheit\u201d zwischen zwei F\u00e4llen gibt:</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(`article.bd-article ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }
            link.classList.add('has-tippy');
            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: false,
                placement: 'auto-start', maxWidth: 500, interactive: true, boundary: document.body, appendTo: document.body,
                onShow(instance) {MathJax.typesetPromise([instance.popper]).then(() => {var isFirefox=typeof InstallTrigger!=='undefined';if(isFirefox&&window.MathJax&&MathJax.startup&&MathJax.startup.output&&MathJax.startup.output.name==="SVG"){const svgs=instance.popper.querySelectorAll('svg');svgs.forEach(svg=>{let bbox=svg.getBBox(),x=bbox.x,y=bbox.y,width=bbox.width,height=bbox.height;svg.setAttribute('width',width);svg.setAttribute('height',height);svg.setAttribute('viewBox',`${x} ${y} ${width} ${height}`);});let rescale=0.015;svgs.forEach(svg=>{let bbox=svg.getBBox(),width=bbox.width,height=bbox.height;svg.setAttribute('width',width*rescale);svg.setAttribute('height',height*rescale);});}});},
            });
        };
    };
    console.log("tippy tips loaded!");
};
